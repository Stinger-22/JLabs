package com.labs.complex.mail;

import com.labs.complex.command.CommandLogin;
import com.labs.complex.log.LogUtilities;

import javax.mail.*;
import javax.mail.internet.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Singleton class responsible for arranging messages and sending them via email
 */
public class MailSender {
    private static MailSender mailSender;

    private String senderMail;
    private Properties properties;
    private final Session session;
    private final InternetAddress internetAddress;

    private File attachment;

    private static final Logger logger = Logger.getLogger(CommandLogin.class.getName());

    private MailSender() throws FileNotFoundException, AddressException {
        LogUtilities.setupLogger(logger);
        properties = getProperties();
        String password = setupAuthData();
        internetAddress = new InternetAddress(senderMail);

        Authenticator authenticator = new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(senderMail, password);
            }
        };

        session = Session.getInstance(properties, authenticator);
    }

    /**
     * Get instance of MailSender for sending email message
     * @return MailSender instance
     * @throws FileNotFoundException settings file is not found
     * @throws AddressException file with email login and password is not found
     */
    public static MailSender getMailSender() throws FileNotFoundException, AddressException {
        if (mailSender == null) {
            mailSender = new MailSender();
        }
        return mailSender;
    }

    private String setupAuthData() throws FileNotFoundException {
        Scanner scanner = new Scanner(new File("password.txt"));
        senderMail = scanner.next();
        return scanner.next();
    }

    private Properties getProperties() throws FileNotFoundException {
        properties = new Properties();
        Scanner scanner = new Scanner(new File("properties.txt"));
        String[] props;
        for (int i = 0; i < 2; i++) {
            props = scanner.nextLine().split("=");
            properties.put(props[0], Boolean.parseBoolean(props[1]));
        }
        for (int i = 0; i < 4; i++) {
            props = scanner.nextLine().split("=");
            properties.put(props[0], props[1]);
        }
        return properties;
    }

    /**
     * Set attachment file for messages
     * @param attachment attachment file for messages
     */
    public void setAttachment(File attachment) {
        this.attachment = attachment;
    }

    /**
     * Send message
     * @param receiver email of receiver
     * @param subject subject of message
     * @param text text of message
     * @throws MessagingException setup message problems
     * @throws IOException attachment file problems
     */
    public void sendMessageAttachment(String receiver, String subject, String text) throws MessagingException, IOException {
        if (attachment == null) {
            throw new IllegalStateException("No attachment file is set. Use method setAttachment");
        }
        Message message = new MimeMessage(session);
        message.setFrom(internetAddress);
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(receiver));

        sendMessage(message, subject, text);
    }

    private void sendMessage(Message message, String subject, String text) throws MessagingException, IOException {
        message.setSubject(subject);
        MimeBodyPart attachmentBodyPart = new MimeBodyPart();
        attachmentBodyPart.attachFile(attachment);

        MimeBodyPart mimeBodyPart = new MimeBodyPart();
        mimeBodyPart.setContent(text, "text/html; charset=utf-8");

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(mimeBodyPart);
        multipart.addBodyPart(attachmentBodyPart);

        message.setContent(multipart);
        Transport.send(message);
    }

    /**
     * Static method for automatic sending errors to developer
     * @throws MessagingException error with message
     * @throws IOException error when log file is not found
     */
    public static void sendErrorsToDeveloper() throws MessagingException, IOException {
        Thread send = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    MailSender mailSender = MailSender.getMailSender();
                    mailSender.setAttachment(new File("applog.txt"));
                    mailSender.sendMessageAttachment("max.botprog@gmail.com", "TaxSystem Error", "Autogenerated message");
                }
                catch (IOException | MessagingException exception) {
                    logger.log(Level.WARNING, "Can't send error log to developer", exception);
                }
            }
        });
        send.start();
    }
}
